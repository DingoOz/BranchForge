// Generated by BranchForge
// Project: MyBehaviorTree

#ifndef MYBEHAVIORTREE_H
#define MYBEHAVIORTREE_H

#include <behaviortree_cpp/bt_factory.h>
#include <behaviortree_cpp/loggers/bt_cout_logger.h>
#include <rclcpp/rclcpp.hpp>
#include <ament_index_cpp/get_package_share_directory.hpp>
#include <concepts>
#include <memory>
#include <string>
#include <iostream>


// Modern C++20 Concepts for Behavior Tree Nodes
#include <concepts>

template<typename T>
concept BehaviorTreeNode = requires(T t) {
    { t.tick() } -> std::same_as<BT::NodeStatus>;
    { t.providedPorts() } -> std::same_as<BT::PortsList>;
};

template<typename T>
concept ActionNode = BehaviorTreeNode<T> && std::derived_from<T, BT::ActionNodeBase>;

template<typename T>
concept ConditionNode = BehaviorTreeNode<T> && std::derived_from<T, BT::ConditionNode>;

template<typename T>
concept ControlNode = BehaviorTreeNode<T> && std::derived_from<T, BT::ControlNode>;

template<typename T>
concept DecoratorNode = BehaviorTreeNode<T> && std::derived_from<T, BT::DecoratorNode>;


namespace MyProject {

class MybehaviortreeBehaviorTree;

} // namespace MyProject

#endif // MYBEHAVIORTREE_H

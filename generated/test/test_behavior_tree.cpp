// Test file for MyBehaviorTree
// Generated by BranchForge

#include <gtest/gtest.h>
#include <behaviortree_cpp/bt_factory.h>

${NAMESPACE_BEGIN}

class BehaviorTreeTest : public ::testing::Test {
protected:
    void SetUp() override {
        factory = std::make_unique<BT::BehaviorTreeFactory>();
        // Register all custom nodes here
    }
    
    void TearDown() override {
        factory.reset();
    }
    
    std::unique_ptr<BT::BehaviorTreeFactory> factory;
};

TEST_F(BehaviorTreeTest, FactoryCreation) {
    ASSERT_NE(factory, nullptr);
}


TEST(BehaviorTreeTest, SequenceTest) {
    BT::BehaviorTreeFactory factory;
    factory.registerNodeType<Sequence>("Sequence");
    
    auto tree = factory.createTreeFromText(R"XML(
        <root main_tree_to_execute="TestTree">
            <BehaviorTree ID="TestTree">
                <Sequence name="test_node"/>
            </BehaviorTree>
        </root>
    )XML");
    
    auto status = tree.tickRoot();
    EXPECT_TRUE(status == BT::NodeStatus::SUCCESS || 
                status == BT::NodeStatus::FAILURE || 
                status == BT::NodeStatus::RUNNING);
}

TEST(BehaviorTreeTest, ForcesuccessTest) {
    BT::BehaviorTreeFactory factory;
    factory.registerNodeType<Forcesuccess>("Force Success");
    
    auto tree = factory.createTreeFromText(R"XML(
        <root main_tree_to_execute="TestTree">
            <BehaviorTree ID="TestTree">
                <Force Success name="test_node"/>
            </BehaviorTree>
        </root>
    )XML");
    
    auto status = tree.tickRoot();
    EXPECT_TRUE(status == BT::NodeStatus::SUCCESS || 
                status == BT::NodeStatus::FAILURE || 
                status == BT::NodeStatus::RUNNING);
}


${NAMESPACE_END}

int main(int argc, char** argv) {
    ::testing::InitGoogleTest(&argc, argv);
    return RUN_ALL_TESTS();
}

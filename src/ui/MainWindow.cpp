#include "ui/MainWindow.h"
#include "project/BehaviorTreeXML.h"
#include <QFileDialog>
#include <QStandardPaths>
#include <QLoggingCategory>

Q_LOGGING_CATEGORY(uiMain, "branchforge.ui.mainwindow")

namespace BranchForge::UI {

MainWindow::MainWindow(QObject* parent)
    : QObject(parent)
{
    qCInfo(uiMain) << "MainWindow created";
    updateTitle();
}

MainWindow::~MainWindow() = default;

void MainWindow::setIsDarkMode(bool darkMode) {
    if (m_isDarkMode != darkMode) {
        m_isDarkMode = darkMode;
        qCInfo(uiMain) << "Dark mode changed to:" << darkMode;
        emit isDarkModeChanged();
    }
}

void MainWindow::newProject() {
    qCInfo(uiMain) << "Creating new project";
    
    QString projectPath = QFileDialog::getSaveFileName(
        nullptr,
        "Create New BranchForge Project",
        QStandardPaths::writableLocation(QStandardPaths::DocumentsLocation) + "/Untitled.bfproj",
        "BranchForge Projects (*.bfproj)"
    );
    
    if (!projectPath.isEmpty()) {
        m_currentProjectPath = projectPath;
        updateTitle();
        emit projectChanged();
        qCInfo(uiMain) << "New project created at:" << projectPath;
    }
}

void MainWindow::openProject() {
    qCInfo(uiMain) << "Opening project";
    
    QString projectPath = QFileDialog::getOpenFileName(
        nullptr,
        "Open BranchForge Project",
        QStandardPaths::writableLocation(QStandardPaths::DocumentsLocation),
        "BranchForge Projects (*.bfproj)"
    );
    
    if (!projectPath.isEmpty()) {
        m_currentProjectPath = projectPath;
        updateTitle();
        emit projectChanged();
        qCInfo(uiMain) << "Project opened:" << projectPath;
    }
}

void MainWindow::saveProject() {
    if (m_currentProjectPath.isEmpty()) {
        newProject();
        return;
    }
    
    qCInfo(uiMain) << "Saving project:" << m_currentProjectPath;
    // TODO: Implement actual saving logic
}

void MainWindow::exportXML() {
    qCInfo(uiMain) << "Exporting behavior tree to Nav2-compatible XML";
    
    QString exportPath = QFileDialog::getSaveFileName(
        nullptr,
        "Export Nav2 Behavior Tree XML",
        QStandardPaths::writableLocation(QStandardPaths::DocumentsLocation) + "/nav2_behavior_tree.xml",
        "XML Files (*.xml)"
    );
    
    if (!exportPath.isEmpty()) {
        qCInfo(uiMain) << "Exporting Nav2 behavior tree to:" << exportPath;
        
        // Generate Nav2-compatible BehaviorTree.CPP format XML
        QString nav2XML = generateNav2BehaviorTreeXML();
        
        QFile file(exportPath);
        if (file.open(QIODevice::WriteOnly | QIODevice::Text)) {
            QTextStream out(&file);
            out << nav2XML;
            file.close();
            qCInfo(uiMain) << "Successfully exported Nav2 behavior tree XML to:" << exportPath;
        } else {
            qCWarning(uiMain) << "Failed to write XML file:" << exportPath;
        }
    }
}

QString MainWindow::generateNav2BehaviorTreeXML() const {
    // Generate a sample Nav2 behavior tree following BehaviorTree.CPP format
    return R"(<?xml version="1.0"?>
<!--Generated by BranchForge for Nav2/BehaviorTree.CPP-->
<root BTCPP_format="4">
  <BehaviorTree ID="NavigateWithRecovery">
    <Fallback>
      <Sequence>
        <ComputePathToPose goal="${goal_pose}" path="${path}" planner_id="GridBased"/>
        <FollowPath path="${path}" controller_id="FollowPath"/>
      </Sequence>
      <Sequence>
        <ClearCostmap service_name="local_costmap/clear_costmap"/>
        <ClearCostmap service_name="global_costmap/clear_costmap"/>
        <ComputePathToPose goal="${goal_pose}" path="${path}" planner_id="GridBased"/>
        <FollowPath path="${path}" controller_id="FollowPath"/>
      </Sequence>
    </Fallback>
  </BehaviorTree>
</root>)";
}

void MainWindow::updateTitle() {
    QString newTitle = "BranchForge";
    if (!m_currentProjectPath.isEmpty()) {
        QFileInfo fileInfo(m_currentProjectPath);
        newTitle += " - " + fileInfo.baseName();
    }
    
    if (m_title != newTitle) {
        m_title = newTitle;
        emit titleChanged();
    }
}

} // namespace BranchForge::UI
name: Core Tests

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  core-tests:
    name: Core Unit Tests (ROS2 Jazzy)
    runs-on: ubuntu-24.04  # Use 24.04 for ROS2 Jazzy
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install basic dependencies
      run: |
        sudo apt-get update
        
        # Check available Qt6 packages first
        echo "=== Available Qt6 packages ==="
        apt-cache search qt6 | grep -E "(base|xml|declarative)" | head -10
        
        # Install core dependencies
        sudo apt-get install -y \
          build-essential \
          cmake \
          pkg-config \
          libgtest-dev \
          python3-pip \
          python3-setuptools
        
        # Install Qt6 packages (now that package.xml is fixed)
        echo "=== Checking available Qt6 packages ==="
        apt-cache search qt6 | grep -E "(dev|cmake)" | sort
        
        echo "\n=== Installing Qt6 packages ==="
        sudo apt-get install -y \
          qt6-base-dev \
          qt6-qmake \
          qt6-tools-dev \
          libqt6core6-dev \
          libqt6gui6-dev \
          libqt6widgets6-dev \
          libqt6opengl6-dev || echo "⚠️ Some Qt6 packages failed to install"
        
        # Try installing Qt6 cmake support specifically
        sudo apt-get install -y qt6-base-dev-tools || echo "⚠️ qt6-base-dev-tools not available"
        
        # Debug: Check what Qt6 files are actually installed
        echo "=== Checking Qt6 installation ==="
        echo "Qt6 packages installed:"
        dpkg -l | grep qt6
        
        echo "\n=== Searching for Qt6 cmake files ==="
        find /usr -name "*Qt6*.cmake" -type f 2>/dev/null | head -20 || echo "No Qt6 cmake files found"
        
        echo "\n=== Checking cmake directories ==="
        find /usr -path "*/cmake/Qt6*" -type d 2>/dev/null || echo "No Qt6 cmake directories found"
        
        echo "\n=== Checking lib directories ==="
        find /usr -name "libQt6*" -type f 2>/dev/null | head -10 || echo "No Qt6 libraries found"
        
        echo "\n=== Testing qmake ==="
        which qmake6 || echo "qmake6 not found"
        qmake6 -query QT_INSTALL_PREFIX 2>/dev/null || echo "qmake6 query failed"

    - name: Install colcon
      run: |
        # Install colcon via pip since apt package doesn't exist on Ubuntu 24.04
        python3 -m pip install --user --upgrade pip
        python3 -m pip install --user colcon-common-extensions

    - name: Setup ROS2 Jazzy (Ubuntu 24.04)
      run: |
        # Add ROS 2 apt repository
        sudo apt-get install -y software-properties-common curl
        curl -sSL https://raw.githubusercontent.com/ros/rosdistro/master/ros.key -o /usr/share/keyrings/ros-archive-keyring.gpg
        echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/ros-archive-keyring.gpg] http://packages.ros.org/ros2/ubuntu noble main" | sudo tee /etc/apt/sources.list.d/ros2.list > /dev/null
        
        sudo apt-get update
        sudo apt-get install -y \
          ros-jazzy-ros-core \
          ros-jazzy-rclcpp \
          ros-jazzy-ament-cmake

    - name: Install BehaviorTree.CPP
      run: |
        # Install from source using catkin build instead of conan
        cd /tmp
        git clone https://github.com/BehaviorTree/BehaviorTree.CPP.git --depth 1 --branch 4.5.2
        cd BehaviorTree.CPP
        mkdir build && cd build
        
        # Set catkin environment to avoid conan dependency
        export CATKIN_DEVEL_PREFIX=/opt/ros/jazzy
        
        cmake .. \
          -DCMAKE_BUILD_TYPE=Release \
          -DBUILD_TESTING=OFF \
          -DBTCPP_EXAMPLES=OFF \
          -DBTCPP_UNIT_TESTS=OFF \
          -DBTCPP_GROOT_INTERFACE=OFF \
          -DBTCPP_SQLITE_LOGGING=OFF \
          -DBUILD_SHARED_LIBS=ON
        make -j$(nproc)
        sudo make install
        sudo ldconfig

    - name: Clean and Build BranchForge
      run: |
        source /opt/ros/jazzy/setup.bash
        
        # Add colcon to PATH
        export PATH=$HOME/.local/bin:$PATH
        export CMAKE_PREFIX_PATH="/usr/lib/x86_64-linux-gnu/cmake:$CMAKE_PREFIX_PATH"
        
        # Clean any existing build cache
        rm -rf build/ install/ log/
        
        # Try to find Qt6 using multiple approaches
        echo "\n=== Attempting to locate Qt6 for CMake ==="
        
        # Method 1: Use qmake to find Qt6
        if command -v qmake6 >/dev/null 2>&1; then
          QT_PREFIX=$(qmake6 -query QT_INSTALL_PREFIX 2>/dev/null || echo "")
          if [ -n "$QT_PREFIX" ]; then
            QT6_DIR="$QT_PREFIX/lib/cmake/Qt6"
            echo "Found Qt6 via qmake6: $QT6_DIR"
          fi
        fi
        
        # Method 2: Search for Qt6Config.cmake
        if [ -z "$QT6_DIR" ]; then
          QT6_CONFIG=$(find /usr -name "Qt6Config.cmake" -type f 2>/dev/null | head -1)
          if [ -n "$QT6_CONFIG" ]; then
            QT6_DIR=$(dirname "$QT6_CONFIG")
            echo "Found Qt6Config.cmake at: $QT6_DIR"
          fi
        fi
        
        # Method 3: Try standard locations
        if [ -z "$QT6_DIR" ]; then
          for path in "/usr/lib/x86_64-linux-gnu/cmake/Qt6" "/usr/lib/cmake/Qt6" "/usr/share/cmake/Qt6"; do
            if [ -f "$path/Qt6Config.cmake" ]; then
              QT6_DIR="$path"
              echo "Found Qt6 at standard location: $QT6_DIR"
              break
            fi
          done
        fi
        
        # Build with fresh cache
        if [ -n "$QT6_DIR" ] && [ -f "$QT6_DIR/Qt6Config.cmake" ]; then
          echo "Building with Qt6_DIR: $QT6_DIR"
          colcon build --packages-select branchforge \
            --cmake-args \
              -DCMAKE_BUILD_TYPE=Release \
              -DBUILD_TESTING=ON \
              -DQt6_DIR="$QT6_DIR"
        else
          echo "❌ Could not locate Qt6Config.cmake - attempting build without Qt6_DIR"
          colcon build --packages-select branchforge \
            --cmake-args \
              -DCMAKE_BUILD_TYPE=Release \
              -DBUILD_TESTING=ON
        fi

    - name: Run Core Tests
      run: |
        source /opt/ros/jazzy/setup.bash
        export PATH=$HOME/.local/bin:$PATH
        source install/setup.bash
        
        echo "=== Running BranchForge Core Tests ==="
        
        # Run the working BehaviorTreeXML test
        if [ -f "build/branchforge/tests/unit/test_behavior_tree_xml" ]; then
          echo "Running BehaviorTreeXML tests..."
          ./build/branchforge/tests/unit/test_behavior_tree_xml --gtest_output=xml:behaviortree_xml_results.xml
          echo "✅ BehaviorTreeXML tests completed"
        else
          echo "❌ BehaviorTreeXML test not found"
          ls -la build/branchforge/tests/unit/ || echo "Tests directory not found"
          exit 1
        fi

    - name: Upload test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: core-test-results
        path: "*.xml"
#include "project/BehaviorTreeXML.h"
#include <QApplication>
#include <QFile>
#include <QTextStream>
#include <QDebug>
#include <iostream>

int main(int argc, char *argv[])
{
    QApplication app(argc, argv);
    
    using namespace BranchForge::Project;
    
    // Create a behavior tree for testing
    BehaviorTreeXML btXML;
    btXML.setTreeName("TestBehaviorTree");
    btXML.setTreeDescription("Test navigation behavior tree generated by BranchForge");
    btXML.setRootNodeId("root");
    
    // Create a simple sequence with action nodes
    BTXMLNode rootNode;
    rootNode.id = "root";
    rootNode.type = "Sequence";
    rootNode.name = "MainSequence";
    rootNode.position = QPointF(400, 200);
    
    BTXMLNode actionNode1;
    actionNode1.id = "action1";
    actionNode1.type = "Action";
    actionNode1.name = "NavigateToGoal";
    actionNode1.position = QPointF(300, 300);
    actionNode1.parameters["goal"] = "${navigation_goal}";
    actionNode1.parentId = "root";
    
    BTXMLNode actionNode2;
    actionNode2.id = "action2";
    actionNode2.type = "Action";
    actionNode2.name = "SendStatus";
    actionNode2.position = QPointF(500, 300);
    actionNode2.parameters["message"] = "Goal reached";
    actionNode2.parentId = "root";
    
    // Add nodes to the tree
    btXML.addNode(rootNode);
    btXML.addNode(actionNode1);
    btXML.addNode(actionNode2);
    
    // Test export to string
    QString xmlString = btXML.exportToString();
    std::cout << "Generated XML:" << std::endl;
    std::cout << xmlString.toStdString() << std::endl;
    
    // Test export to file
    QString testFile = "/tmp/test_behavior_tree.xml";
    if (btXML.exportToFile(testFile)) {
        std::cout << "\nSuccessfully exported to: " << testFile.toStdString() << std::endl;
        
        // Read and display file content
        QFile file(testFile);
        if (file.open(QIODevice::ReadOnly | QIODevice::Text)) {
            QTextStream in(&file);
            std::cout << "\nFile content:" << std::endl;
            std::cout << in.readAll().toStdString() << std::endl;
        }
    } else {
        std::cout << "Failed to export to file" << std::endl;
    }
    
    return 0;
}